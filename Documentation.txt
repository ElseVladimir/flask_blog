                                ::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                                :::Небольшая документация о проектe(будет дополнятся):::
                                ::::::::::::::::::::::::::::::::::::::::::::::::::::::::


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                $$$$$$$$$$$$$$$$$
                                $$$ Структура $$$
                                $$$$$$$$$$$$$$$$$
    posts - blueprint с шаблонами
    templates - html шаблоны
    app - тут экземпляр класса Flask, экземпляр SQLAlchemy, регистрируем конфигурацию
    config - класс Configuration, где лежит конфигурация
    main -  инициирует работу отладочного сервера, тут регистрируем blueprints
    models - создаем поля и колонки в БД
    views - тут роуты для темплейтов
    manage - отвечает за миграцию, за внесение изменений в дб
    migrations - содержит инфу о миграциях( в гите не будет)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                ^^^ НЕМНОГО ОБ РАБОТЕ С SQLAlchemy в терминале^^^
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    from app import db #импортируем экземпляр db из app
    import models #импортируем нашу модель
    db.create_all() #создаем базу на основе модели
    from models import Post #импортируем класс из моделей
    p = Post(title="First post", body="First post body") #присваиваем переменной экземпляр класса с аргументами
    db.session.add(p) #добавляем, изменений в базе данных еще нет
    db.session.add_all([]) #можно добавить сразу несколько записей, для этого надо передать список
    db.session.commit() #добавляет запись в базу данных
    posts = Post.query.all() #query.all() вернет список постов
    p3 = Post.query.filter(Post.title.contains('second')).all() #метод filter() возвращает из базы отфильтрованную по критерию информацию
    p4 = Post.query.filter(Post.title=='s').all()/.first() #строгий поиск,возвращает список обьектов,first() возвращает просто обьекты
    python manage.py db init - делает снимок базы данных(миграцию), где db это имя указанное в app.py
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*** зависимости (virtualenv venv) ***
    - pip install flask
    - pip install flask-sqlalchemy
    - pip install mysql-connector-python
    - pip install flask-migrate
    - pip install flask-script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         &&&&&&&&&&&&&&&&
                                         &&& МИГРАЦИИ &&&
                                         &&&&&&&&&&&&&&&&
    - python manage.py db init - инициализация миграции
    - python manage.py db migrate - новая миграция(создает файл миграции)
    - python manage.py db upgrade - записывает изменения непосредственно в базу данных
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


changelog:
25.12.20
    - в app.py подкючены миграции
    - в app.py создан manager с именем 'db'
    - создан manage.py, импортируем туда manager из app.py,из main.py импортируем все модули
    - теперь можно в терминале командой 'python manage.py db init' сделать снимок базы данных(создает миграцию)
    - создана модель Tag с полями name, slug
    - создана модель post_tags для связи много-ко-многим постов и тэгов, множество постов имеют множество тэгов и наоборот
    - в модель post добавлен relationship
    - добавлено в posts/blueprint во вьюху переменную tags которая передает в шаблон тэги со связанными постами
    - в posts/tempates/posts/post_detail.html добавлено отображение закрепленных тэгов под названием поста
    - в posts/blueprint создана новая вьюха - отправляющая на tag_detail.html
    - создан tag_detail.html , тут будет информация о тэгах
    